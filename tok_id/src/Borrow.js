import React from "react";
import { Button, Row, Col} from 'react-bootstrap';
import Web3 from 'web3'
import SimpleCrypto from "simple-crypto-js";

let ethereum = window.ethereum;
let web3 = window.web3;

// Modern DApp Browsers
if (window.ethereum) {
   web3 = new Web3(window.ethereum);
   try { 
      window.ethereum.enable().then(function() {
          // User has allowed account access to DApp...
      });
   } catch(e) {
      // User has denied account access to DApp...
   }
}
// Legacy DApp Browsers
else if (window.web3) {
    web3 = new Web3(window.web3.currentProvider);
}
// Non-DApp Browsers
else {
    alert('You have to install MetaMask !');
}




let accounts = [];


export default class Borrow extends React.Component {

	constructor(props) {
		super(props);
		this.state = {  account: '', 
		                value1: '',
		                value2: '',
		                value3: '',
		              };


	  }

	  async componentWillMount(){
	      this.loadData();
	  }

    async loadData(){

	    const network = await web3.eth.net.getNetworkType()
	    console.log(network);

	    accounts = await web3.eth.getAccounts()
	    console.log(accounts[0])
	    this.setState({ account: accounts[0] })

    }


   borrow(){
	console.log('yo');

	//1) encrypt data
	var randomString = SimpleCrypto.generateRandom();
	var _secretKey = randomString;
	var simpleCrypto = new SimpleCrypto(_secretKey);
	var plainText = "ID Data";
	var chiperText = simpleCrypto.encrypt(plainText);

	//var decipherText = simpleCrypto.decrypt(cipherText);

	//2) upload the encryption key to somewhere



	//3) create the token with parameter
	this.createToken(chiperText);


	}

  createToken = async (id_data) => {

    //get vaues from forms 


      let bytecodeWithParameters ="0x60806040523480156200001157600080fd5b506040516200184738038062001847833981810160405260208110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280600881526020017f4964656e746974790000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4944540000000000000000000000000000000000000000000000000000000000815250601282600390805190602001906200017e9291906200043c565b508160049080519060200190620001979291906200043c565b5080600560006101000a81548160ff021916908360ff160217905550505050620001c9336001620001e960201b60201c565b8060069080519060200190620001e19291906200043c565b5050620004eb565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620002a981600254620003b360201b6200118e1790919060201c565b60028190555062000307816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620003b360201b6200118e1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101562000432576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200047f57805160ff1916838001178555620004b0565b82800160010185558215620004b0579182015b82811115620004af57825182559160200191906001019062000492565b5b509050620004bf9190620004c3565b5090565b620004e891905b80821115620004e4576000816000905550600101620004ca565b5090565b90565b61134c80620004fb6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636f3670bf1161008c578063a457c2d711610066578063a457c2d714610449578063a9059cbb146104af578063ba1e736214610515578063dd62ed3e14610598576100cf565b80636f3670bf146102eb57806370a082311461036e57806395d89b41146103c6576100cf565b806306fdde03146100d4578063095ea7b31461015757806318160ddd146101bd57806323b872dd146101db578063313ce567146102615780633950935114610285575b600080fd5b6100dc610610565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011c578082015181840152602081019050610101565b50505050905090810190601f1680156101495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a36004803603604081101561016d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106b2565b604051808215151515815260200191505060405180910390f35b6101c56106d0565b6040518082815260200191505060405180910390f35b610247600480360360608110156101f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106da565b604051808215151515815260200191505060405180910390f35b6102696107b3565b604051808260ff1660ff16815260200191505060405180910390f35b6102d16004803603604081101561029b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107ca565b604051808215151515815260200191505060405180910390f35b6102f361087d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610333578082015181840152602081019050610318565b50505050905090810190601f1680156103605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103b06004803603602081101561038457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061091f565b6040518082815260200191505060405180910390f35b6103ce610967565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561040e5780820151818401526020810190506103f3565b50505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104956004803603604081101561045f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a09565b604051808215151515815260200191505060405180910390f35b6104fb600480360360408110156104c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ad6565b604051808215151515815260200191505060405180910390f35b61051d610af4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561055d578082015181840152602081019050610542565b50505050905090810190601f16801561058a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105fa600480360360408110156105ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b92565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106a85780601f1061067d576101008083540402835291602001916106a8565b820191906000526020600020905b81548152906001019060200180831161068b57829003601f168201915b5050505050905090565b60006106c66106bf610c19565b8484610c21565b6001905092915050565b6000600254905090565b60006106e7848484610e18565b6107a8846106f3610c19565b6107a38560405180606001604052806028815260200161128260289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610759610c19565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ce9092919063ffffffff16565b610c21565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006108736107d7610c19565b8461086e85600160006107e8610c19565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118e90919063ffffffff16565b610c21565b6001905092915050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109155780601f106108ea57610100808354040283529160200191610915565b820191906000526020600020905b8154815290600101906020018083116108f857829003601f168201915b5050505050905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ff5780601f106109d4576101008083540402835291602001916109ff565b820191906000526020600020905b8154815290600101906020018083116109e257829003601f168201915b5050505050905090565b6000610acc610a16610c19565b84610ac7856040518060600160405280602581526020016112f36025913960016000610a40610c19565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ce9092919063ffffffff16565b610c21565b6001905092915050565b6000610aea610ae3610c19565b8484610e18565b6001905092915050565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b8a5780601f10610b5f57610100808354040283529160200191610b8a565b820191906000526020600020905b815481529060010190602001808311610b6d57829003601f168201915b505050505081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ca7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806112cf6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061123a6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e9e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806112aa6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806112176023913960400191505060405180910390fd5b610f8f8160405180606001604052806026815260200161125c602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ce9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611022816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118e90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600083831115829061117b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611140578082015181840152602081019050611125565b50505050905090810190601f16801561116d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008082840190508381101561120c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a72315820e14e61c6d533ac5c52bd4a5818ddd5a614e87eccbdacd703c84d5b2af6b483da64736f6c634300050c0032" +
	  web3.eth.abi.encodeParameters(['string'], 
      [ id_data]).slice(2);
      
      let txHash = '';
      let contractAddress = '';

      //send transaction and get hash
      await web3.eth.sendTransaction({
            from: accounts[0],
            data: bytecodeWithParameters,
        }, function(error, hash){
          if(!error){
            
            txHash = hash;
        }
        else{
          console.log(error);
        }
         
      });

      

      web3.eth.getTransactionReceipt(txHash, function(error, result){
        console.log('contract location: ' + result.contractAddress)
        contractAddress = result.contractAddress;
      });

      




  }

  render() {
    return (
    	<div>
	    	<Row style={{marginTop:150}}>
	    		<Col style={{display: 'flex', justifyContent:'center'}}>
	    			<Button variant="outline-primary" onClick={() => this.borrow()}>Borrow</Button>
	    		</Col>
	    	</Row>
    	</div>
    );
  }
}


/*
pragma solidity >=0.4.22 <0.6.0;


import "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";
import "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol";

contract IdentityToken is ERC20, ERC20Detailed {
    string public  _identity;
    
    constructor(string memory identity) ERC20Detailed("Identity", "IDT", 18) public {
        _mint(msg.sender, 1);
        _identity = identity;
    }
    
    function getIdentityHash() public view returns(string memory){
        return _identity ;
    }
}

*/




